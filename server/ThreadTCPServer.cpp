#include "Common.h"

#define SERVERPORT 9000
#define BUFSIZE 1024
int clientCount = 0;

// 클라이언트와 데이터 통신을 처리하는 함수
DWORD WINAPI ProcessClient(LPVOID arg)
{
	int retval;
	SOCKET client_sock = (SOCKET)arg;
	struct sockaddr_in clientaddr;
	char addr[INET_ADDRSTRLEN];
	int addrlen;
	char buf[BUFSIZE];
	char filename[256];
	float transferPercent = 0;

	// 클라이언트 정보 얻기
	addrlen = sizeof(clientaddr);
	getpeername(client_sock, (struct sockaddr*)&clientaddr, &addrlen);
	inet_ntop(AF_INET, &clientaddr.sin_addr, addr, sizeof(addr));

	//while (1) {
	//	int filenameLen;
	//	long long totalReceived = 0; // 수신된 데이터 양

	//	// 파일명 크기
	//	retval = recv(client_sock, (char*)&filenameLen, sizeof(int), MSG_WAITALL);
	//	if (retval == SOCKET_ERROR) {
	//		err_display("recv()");
	//		break;
	//	}
	//	if (retval == 0)
	//		break;

	//	// 파일명 받기
	//	retval = recv(client_sock, filename, filenameLen, MSG_WAITALL);
	//	if (retval == SOCKET_ERROR) {
	//		err_display("recv()");
	//		break;
	//	}
	//	if (retval == 0)
	//		break;

	//}

	// 소켓 닫기
	clientCount--;
	//closesocket(client_sock);
	//printf("------------------------------------------------------------------------\n");
	//printf("[TCP 서버] 클라이언트 종료: IP 주소=%s, 포트 번호=%d\n", addr, ntohs(clientaddr.sin_port));
	//printf("------------------------------------------------------------------------\n");
	return 0;
}

int main(int argc, char* argv[])
{
	int retval;

	// 윈속 초기화
	WSADATA wsa;
	if (WSAStartup(MAKEWORD(2, 2), &wsa) != 0)
		return 1;

	// 소켓 생성
	SOCKET listen_sock = socket(AF_INET, SOCK_STREAM, 0);
	if (listen_sock == INVALID_SOCKET) err_quit("socket()");

	// bind()
	struct sockaddr_in serveraddr;
	memset(&serveraddr, 0, sizeof(serveraddr));
	serveraddr.sin_family = AF_INET;
	serveraddr.sin_addr.s_addr = htonl(INADDR_ANY);
	serveraddr.sin_port = htons(SERVERPORT);
	retval = bind(listen_sock, (struct sockaddr*)&serveraddr, sizeof(serveraddr));
	if (retval == SOCKET_ERROR) err_quit("bind()");

	// listen()
	retval = listen(listen_sock, SOMAXCONN);
	if (retval == SOCKET_ERROR) err_quit("listen()");

	// 데이터 통신에 사용할 변수
	SOCKET client_sock;
	struct sockaddr_in clientaddr;
	int addrlen;
	HANDLE hThread;

	while (1) {
		// accept()
		addrlen = sizeof(clientaddr);
		client_sock = accept(listen_sock, (struct sockaddr*)&clientaddr, &addrlen);
		if (client_sock == INVALID_SOCKET) {
			err_display("accept()");
			break;
		}

		// 접속한 클라이언트 정보 출력
		clientCount++;
		char addr[INET_ADDRSTRLEN];
		inet_ntop(AF_INET, &clientaddr.sin_addr, addr, sizeof(addr));
		printf("------------------------------------------------------------------------\n");
		printf("[TCP 서버] #%d번 클라이언트 접속: IP 주소=%s, 포트 번호=%d\n",
			clientCount, addr, ntohs(clientaddr.sin_port));
		printf("------------------------------------------------------------------------\n");

		// 스레드 생성
		hThread = CreateThread(NULL, 0, ProcessClient, (LPVOID)client_sock, 0, NULL);
		if (hThread == NULL) { closesocket(client_sock); }
		else { CloseHandle(hThread); }
	}

	// 소켓 닫기
	closesocket(listen_sock);
	printf("------------------------------------------------------------------------\n");
	printf("[TCP 서버] 클라이언트 종료");
	printf("------------------------------------------------------------------------\n");
	// 윈속 종료
	WSACleanup();
	return 0;
}
